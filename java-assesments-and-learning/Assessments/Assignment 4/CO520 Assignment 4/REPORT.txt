+–––––––––––––––––––––––––––––––––––––––––––––––––+
||  _  \  | ____| |  _  \ /  _  \ |  _  \  |_   _||
|| |_| |  | |__   | |_| | | | | | | |_| |    | |  |
||  _  /  |  __|  |  ___/ | | | | |  _  /    | |  |
|| | \ \  | |___  | |     | |_| | | | \ \    | |  |
||_|  \_\ |_____| |_|     \_____/ |_|  \_\   |_|  |
|                                                 |
|             CO520 - Assignment 4                |
|        A GUI for a Game - Game of Snake         |
|                                                 |
|         Author: Akash Payne - ap567             |
|                                                 |
|        Version: SnakeApplication2.0             |
|             Date: 03/04/2014                    |
+–––––––––––––––––––––––––––––––––––––––––––––––––+
       
The application, "CO520 BLUEJ - Snake Application", set by using the setTitle method, gives the game window an appropriate title that illustrates what the window is for:  Snake application is a retro/classic game in which the player controls a snake that moves around a board. The objective is to eat the food that gets randomly placed on a board, with each item that the snake eats, it grows in length and equally the player earns points that go towards a score, the aim is to beat the “high-score” that is saved into a file and kept for later uses. The player loses the game when the snake either collides with its tail, or a wall.

The actual game window is calculated in the program, see Game Class, and has a set size therefore the GUI will always look appropriate on the screen. A feature that allows the user to “full-screen” the application could be added at a later date. 

The window frames that are used in the application are generally GridBagConstraints layouts, as this is one of the most flexible layout managers that the Java platform provides: The layout places components in a grid of rows and columns that allows specified components to extend to multiple rows/columns. The rows and columns can all be different sizes and thus it is easy to get preferred sizes through the size of the cells. 

The window has a fully functional menu bar with the following menus and items: 

File: The file menu has two menu items: Start a new game, this menu item. These items allow the user to start playing the game and Exit the game- allowing the user to exit the game. 

Difficulty: The difficulty menu has a single item, Settings. The settings item opens up a new frame/window and with the use of: a JRadioButton, an Abstract Button, a Button Group, JLabels, JRadio Button and MouseEvents, it allows the user to choose what difficulty to play at. 

Help: The help menu has three items, About, Instructions and Controls: The help menu allows the user to view different information about the game, e.g. the about item, lets the user see information about the application, i.e. the author, the date made and the version. The user is also able to see instructions on how to play the game and the controls used in the game. This information is publicised through the use of JOptionPane method that allows the application to show a message dialog of different nature, for example, I have used 3 different types: an information message, a plain message and a warning message. These different types each have different icons that represent the type of dialog display. 

Furthermore, event listeners, whether they are mouse, key or action listeners have been attached to components, such as the Menu items and buttons, that allow the user to be able to interact with the application and through their choices, run the game and control what happens. For example, the menu items use addActionListener that allows the user to run an item menu function when the item menu is selected. 

Lastly, the application uses dynamic modality, such as, pausing the game, this can only be done when the game has started, and also, the difficulty of the game can only be chosen before a game starts, to allow the user have a better experience of the game. 

*** Additional Features: *** (not explained)

GAME Class:
JFrame, setSize, setTitle, setDefaultCloseOperation, setLocationRelativeTo, setResizable, setVisible, KeyListener, addKeyListener, keyTyped, keyPressed, ActionListener, JMenu… JMenuItem, setJMenuBar, getJMenuBar(), JOptionPane, INFORMATION_MESSAGE, WARNING_MESSAGE, ERROR_MESSAGE(Drawing Panel).

SNAKE: Class:
Graphics:The graphics class has been used to allow the application to draw onto the frame components. 

DRAWINGPANEL Class:
Timer, ImageIO.

SCORES Class:
GridLayout.